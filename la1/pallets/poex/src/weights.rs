
//! Autogenerated weights for `pallet_poex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-THUNDER0`, CPU: `12th Gen Intel(R) Core(TM) i7-12700H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_poex
// --extrinsic
// *
// --output
// ./pallets/poex/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_poex`.
pub trait WeightInfo {
	fn create_claim() -> Weight;
	fn revoke_claim() -> Weight;
	fn transfer_claim() -> Weight;
}

/// Weights for `pallet_poex` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn create_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3526`
		// Minimum execution time: 10_648_000 picoseconds.
		Weight::from_parts(11_365_000, 3526)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn revoke_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3526`
		// Minimum execution time: 11_644_000 picoseconds.
		Weight::from_parts(11_840_000, 3526)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn transfer_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3526`
		// Minimum execution time: 12_913_000 picoseconds.
		Weight::from_parts(13_459_000, 3526)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn create_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3526`
		// Minimum execution time: 10_648_000 picoseconds.
		Weight::from_parts(11_365_000, 3526)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn revoke_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3526`
		// Minimum execution time: 11_644_000 picoseconds.
		Weight::from_parts(11_840_000, 3526)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoexModule::Proofs` (r:1 w:1)
	/// Proof: `PoexModule::Proofs` (`max_values`: None, `max_size`: Some(61), added: 2536, mode: `MaxEncodedLen`)
	fn transfer_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `197`
		//  Estimated: `3526`
		// Minimum execution time: 12_913_000 picoseconds.
		Weight::from_parts(13_459_000, 3526)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}